

Final Exam Study Guide Specifications
---------------------------
1) Identifying classes and their attributes and drawing domain class diagrams
2) Be able  to draw domain model class diagram, identify association classes and their attributes.
3) Be prepare to design DB, create tables , define PK, FKs , normalize databases and draw DB schema.


Chapter 4 - 
--------------------------------------------------------------------------------------------
• Called association on class diagram in UML
– Multiplicity is term for the number of associations between classes: 1 to 1 or 1 to many
(synonym to cardinality)
– UML is the primary emphasis of this text
• Called relationship on ERD in database class
– Cardinality is term for number of relationships in entity relationship diagrams: 1 to 1 or 1 to
many (synonym to multiplicity)
• Associations and Relationships apply in two directions
– Read them separately each way
– A customer places an order
– An order is placed by a customer


Chapter 5 - Use Case Activity Diagrams and Sequence Diagrams
--------------------------------------------------------------------------------------------
System Sequence Diagram (SSD)
• A UML sequence diagram
• Special case for a sequence diagram
– Only shows actor and one object
– The one object represents the complete system
– Shows input & output messaging requirements for a use case
• Actor, :System, object lifeline • Messages



Chapter 6 - Foundation for System Design
--------------------------------------------------------------------------------------------


Chapter 7 - 
--------------------------------------------------------------------------------------------
Distributed Architecture
• Three-Layer architecture
– Client/server architecture with application divided into view layer, logic layer, and data layer
• View layer – which accepts user input and formats and displays processing results • logic layer – which implements the rules and procedures of business processing
• data layer – which manages stored data, usually in one or more databases

Interoperability
– The ability of an application to interact with other software

Deployment Diagrams
– describes how software components are distributed across hardware and system software components.


Chapter 8 - UI Design Principles
--------------------------------------------------------------------------------------------
Principle of User-Interface Design
• Closure
– Closure on Dialogues – End of a series of actions
– Protect user’s work – at end and for partially complete work – Provide undo to reverse actions
• Readability and Navigation
– Readable text for all users (type, size, color)
– Clear navigation
– Reverse navigation – a way out – breadcrumbs navigation
• Usability and Efficiency
– Shortcut keys for experienced users – Meaningful error messages
– Simplicity – KISS

User Interface Design
• Is the system a custom application or browser based?
• What kinds of devices will the user-interface need to support?
• What operating systems will the user-interface run on?

Chapter 9 - Normalize Tables SQL Tables 
-------------------------------------------------------------------------------------------- (9) 

Normalization of Data Tables 
--------------------------
First Normal Form
• A table is in first normal form if every field contains only one value. All attributes values must be atomic.

Second Normal Form
• A table is in Second Normal Form if it is First Normal Form and each non-key attribute is only functionally dependent on the entire primary key.
– A table violates 2NF when a non-key attribute is functionally dependent on only part of the primary key. This situation only arises with tables that have multiple attribute keys.

Third Normal Form
• A table is in Third Normal Form if it is in 2NF and NO non-key attribute (or set) is functionally dependent on any other non-key attribute (or set)
– In other words, no FDs among any non-key attributes

Example: Shipping + Tax +Item Total = TotalAmt

Functional Dependency
A relationship between attributes such that the values in the first attribute (or set) always determine the values in the second attribute (or set)
Attribute B is functionally dependent on attribute A if for each value of attribute A there is only one corresponding value of attribute B.
– Written as FD: AB.

Distributed Database Architecture
• Decentralized database is stored at many locations but not requiring interconnectivity or synchronization
• Homogeneous distributed database is stored at multiple locations, with all locations using the same DBMS. Coordinated with a global schema
• Heterogeneous distribute database is stored at multiple locations and with different DBMS and may have local schemas.

Relational Database
• Relational database management system (RDBMS) -- a DBMS that organizes data in tables (relations)
• Table – a two-dimensional data structure of columns and rows
• Row – one horizontal group of data attribute values
• Attribute – one vertical group of data attribute values
• Attribute value – the value held in a single table cell
• Key – an attribute or set of attributes, the values of which occur only once in all the rows of the table
• Candidate Key – an attribute or set of attributes that could server as the primary key
• Primary key – the key chosen by a database designer to represent relationships
among rows in different tables
• Foreign key – an attribute that duplicates the primary key of a different (or foreign) table

Distributed Database Architecture
• Decentralized database is stored at many locations but not requiring interconnectivity or synchronization
• Homogeneous distributed database is stored at multiple locations, with all locations using the same DBMS. Coordinated with a global schema
• Heterogeneous distribute database is stored at multiple locations and with different DBMS and may have local schemas.

Vertical Partition – Different columns are stored at different locations.
– vertical partitioning of the database occurs more frequently when different functional areas must access the same database and the same data

Protecting the Database
• Transaction Logging – a technique to record all updates including change, date, time, user
– Helps to prevent fraud
– Recovery mechanism for failures
• Concurrency and Update Controls
– Transaction – a piece of work with several steps, either all must complete
or none must be accepted
– Database lock – technique to apply exclusive control to a portion of the database to one user at a time
– Shared or read lock – a lock where multiple transactions (users) may read the data
– Exclusive or write lock – a lock where only one transaction (user) may access the locked portion of the database

---------------------
Basic SQL Operation
• Example of creating P.K and F.K. (Course and CourseSection tables)

Create Table Course (
	course_ID VARCHAR(6), 
	Course_name VARCHAR(50), 
	creditUnit INT(1)
	PRIMRY KEY (course_ID), 
);

Create Table CourseSection(
section_ID INT (1), 
course_ID VARCHAR(6), 
sectionSchedule VARCHAR room_Number VARCHAR(5), 
FOREIGN KEY (course_ID) 
PRIMARY KEY (section_ID)
(25),
REFERENCES Course(course_ID),
, course_ID));


Create Table CourseEnrollment( section_ID INT (1),
course_ID VARCHAR(6), Student_ID INT (6),
grade VARCHAR(2),
FOREIGN KEY (student_ID) REFERENCES student(student_ID), FOREIGN KEY (course_ID) REFERENCES CourseSection(course_ID), FOREIGN KEY (section_ID) REFERENCES courseSection(section_ID), PRIMARY KEY (section_ID , course_ID, student_ID));

Chapter 10 - Software Methodologies 
--------------------------------------------------------------------------------------------

There are two general approaches to the The System Development Life Cycle (SDLC)

1) Predictive Approach to the SDLC
– Waterfall model
– Assumes the project can be planned in advance and that the information system can be developed according to the plan
– Requirements are well understood and/or low technical risk

2) Adaptive Approach to the SDLC
– Iterative model (as see in this course)
– Assumes the project must be more flexible and adapt to changing needs as the project progresses
– Requirements and needs are uncertain and/or high technical risk

Types of Models 
-----
Waterfall Predictive SDLC
• Waterfall model
– SDLC that assumes phases can be completed sequentially with no overlap or
iteration
– Once one phase is completed, you fall over the waterfall to the next phase, no going back

Note: Predictive SDLCs typically include support as a project phase.

Adaptive Approaches
• Incremental development
– Completes portions of the system in small increments and integrated as the
project progresses
– Sometimes considered “growing” a system
Walking Skeleton
– The complete system structure is built first, but with bare-bones functionality

Note: Adaptive SDLCs treat support as a separate project.

------
A Methodology includes a collection of techniques that are used to complete activities and tasks, including modeling, for every aspect of the project. (aka. System development process)

Model
– An abstraction of an important aspect of the real world.
– Makes it possible to understand a complex concept by focusing only on a relevant part
– Each model shows a different aspect of the concept
– Crucial for communicating project information
• i.e : Flow charts, ERD, DFD, Use case diagram, Class diagram, SSD, Database schema ,... 

Tools
– Software applications that assists developers in creating models or other components required for a project
• i.e : code generator tool, IDE, Visual modeling tool, Data base management application, reverse engineering tool ,code generation, ...

Technique
– A collection of guidelines that help an analyst complete an activity or task
• i.e : Object Oriented Programming technique, RDB technique, Use case modeling, UI design, User interviewing , data modeling , ...

-------
Agile Development

A guiding philosophy and set of guidelines for developing information systems in an unknown, rapidly changing environment.
• Agile Values in “Manifesto for Agile Software Development” – Value responding to change over following a plan
– Value individuals and interactions over processes and tools
– Value working software over comprehensive documentation
– Value customer collaboration over contract negotiation

Agile Modeling Principles
• Develop software as the primary goal
– Don’t get distracted by documentation or models
• Enable the next effort as your secondary goal – Be aware of next step versions or revisions
• Minimizeyourmodelingactivity
– Only build what helps move the project forward
• Embrace change and change incrementally
– Take small steps that keep you on-track and that can be reversed if necessary
• Model with a purpose – Model to understand
– Model to communicate

The Unified Process (UP)
• The UP was the early leader in adaptive approaches
• UP and UML (Unified Modeling Language) were developed together
• UP Phases organize iterations into four primary areas of focus during a project – Inception phase – getting the project started
– Elaboration – understanding the system requirements
– Construction – building the system
– Transitions – preparing for and moving to deploying the new system

Extreme Programming (XP)
• Takes the best practices of software development and extends them “to the extreme”
• Focus intensely on proven industry practices
• Combine them in unique ways to get better results
• XP Core Values
• Communication
• Ensures that open, frequent communication occurs.
• Simplicity
• Feedback
• User: on Functionality and requirements
• Developers: design and code
• Courage
• Stick with too-tight schedule and “do it right”

SCRUM
• A philosophy based on Agile development principles
– Responsive to a highly changing, dynamic environment in which users might not know
exactly what is needed and might also change priorities frequently
– Intense effort involving the entire team for a defined period of time
– Focuses primarily on the team level (social engineering)
• Product backlog
– Prioritized list of user requirements
• Product owner
– The client stakeholder who controls backlog
• Scrum master
– Scrum project manager, facilitator
• Scrum Team
— A small group of developers
— Sets its own goal for what it can accomplish in a specific period of time
— Organizes itself and parcels out the work to members

Chapter 12 : Object Oriented Design Fundamental
--------------------------------------------------------------------------------------------
Instantiation
Creation of an object in memory based on the template provided by the class
Method
The function executed within an object when invoked by a message request (method call)

Design Class Stereotypes 

<<entity>> - for objects such as a Customer or Car 
<<controller>> - for the handling of transactions such as UseCaseHandler or in my case the sessionHandler in networking class 
<<boundary>> - input forms that are handled by the user 
<<dataAccess>> - SaleDBReader such as accessing a database in the system. 


Composition relation is when a child object cannot exist without the parent object such as building class and the bathroom inheritance. 
		Depticted by a close diamond. If the diamond is filled in -----> filled in diamond cannot exist without the parent 

A diamond that is not filled in is a child of a parent class -----> can exist without the parent

Multiplicity gives a quantitive value to the class such as 
0..1 zero to one
n specific number 
0..* zero to many 
1..* one to many
m..n specific range 

# if you want a better exampe representation 
https://www.youtube.com/watch?v=UI6lqHOVHic

------------
Steps of Object-Oriented Design
• Object-oriented design
– The process to identify the classes, their methods and the
messages required for a use case
• Use case driven
– Design is carried out use case by use case
• Programmer will code all of the methods across various classes that are required to implement the flow of execution of a single use case.
– Three paths
• Simple use case use CRC Cards
• Medium use case use Communication Diagram • Complex use case use Sequence Diagram

Design Class Diagrams

• Stereotype a way of categorizing a model element by its characteristics, indicated by guillemets (<< >>)
• Entity class is the design stereotype for a problem domain class. It typically describes something users deal with when doing their work. Objects of entity classes usually need to be remembered and are also referred to as persistent classes.

• Persistent class an class whose objects exist after a system is shut down (data remembered)

• Boundary class or view class a class that exists on a system’s automation boundary, such as an input window form or Web page

– A boundary stereotype is either a user or a system interface class.
• Controller class a class that mediates between boundary classes and entity classes, acting
as a switchboard between the view layer and domain layer
• Data access class: a class that is used to retrieve data from and send data to a database

-----------
First-Cut Design Class Diagram
• Proceed use case by use case, adding to the diagram
• Pick the domain classes that are involved in the use case (see
preconditions and post conditions for ideas)
• Add a controller class to be in charge of the use case
• Determine the initial navigation visibility requirements using the guidelines and add to diagram
• Elaborate the attributes of each class with visibility and type
• Note that often the associations and multiplicity are removed from the design class diagram as in text to emphasize navigation, but they are often left on

CRC Cards Procedure
1. Because the process is to design, or realize, a single use case, start with a set of unused CRC cards. Add a controller class.
2. Identify a problem domain class that has primary responsibility for this use case that will receive the first message from the use case controller. For example, a Customer object for new sale.
3. Use the first cut design class diagram to identify other classes that must collaborate with the primary object class to complete the use case.
4. Add user-interface classes to identify inputs and outputs
5. Add any other required utility classes

---------------------
Fundamental Design Principles

• Coupling
– A quantitative measure of how closely related classes are linked (tightly or loosely coupled)
– Two classes are tightly coupled of there are lots of associations with another class
– Two classes are tightly coupled if there are lots of messages to another class
– It is best to have classes that are loosely coupled
– If deciding between two alternative designs, choose the one where overall coupling is less

• Cohesion
– A quantitative measure of the focus or unity of purpose within a single class (high or low
cohesiveness
– One class has high cohesiveness if all of its responsibilities are consistent and make sense for purpose of the class (a customer carries out responsibilities that naturally apply to customers)
– One class has low cohesiveness if its responsibilities are broad or makeshift
– It is best to have classes that are highly cohesive
– If deciding between two alternative designs, choose the one where overall cohesiveness is high

Notation for a Design Class
• Class level method—applies to class rather than objects of class (aka static method). Underline it.
– ++getNumberOfCustomers(): Integer
• Class level attribute—applies to the class rather than an object (aka
static attribute). Underline it. – -noOfPhoneSales:int
• Abstract class– class that can’t be instantiated. – Only for inheritance. Name in Italics.
• Concrete class—class that can be instantiated.

Chapter 13 & 14
-------------------------------------------------------------------------------------------------------------------
Controller Pattern
• First step toward multilayer architecture
• Switchboard between user-interface classes and domain layer classes
• Reduces coupling between view and domain layer
• A controller can be created for each use case, however, several controllers can be combined together for a group of related use cases
• It is a completely artificial class – an artifacts

More Design Pattern
• Adapter
– Like an electrical adapter
• i.e : VGA to HDMI
– Place an adapter class between your system and an external system
• Factory
– Use factory class when creation logic is complex for a set of classes
• Singleton
– Use when only one instance should exist at a time and is shared






















